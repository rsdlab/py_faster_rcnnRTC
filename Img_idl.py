# Python stubs generated by omniidl from idl/Img.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "Img"
#
__name__ = "Img"
_0_Img = omniORB.openModule("Img", r"idl/Img.idl")
_0_Img__POA = omniORB.openModule("Img__POA", r"idl/Img.idl")


# typedef ... Vec3
class Vec3:
    _NP_RepositoryId = "IDL:Img/Vec3:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Img.Vec3 = Vec3
_0_Img._d_Vec3  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3)
_0_Img._ad_Vec3 = (omniORB.tcInternal.tv_alias, Vec3._NP_RepositoryId, "Vec3", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3))
_0_Img._tc_Vec3 = omniORB.tcInternal.createTypeCode(_0_Img._ad_Vec3)
omniORB.registerType(Vec3._NP_RepositoryId, _0_Img._ad_Vec3, _0_Img._tc_Vec3)
del Vec3

# typedef ... Mat44
class Mat44:
    _NP_RepositoryId = "IDL:Img/Mat44:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Img.Mat44 = Mat44
_0_Img._d_Mat44  = (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 4), 4)
_0_Img._ad_Mat44 = (omniORB.tcInternal.tv_alias, Mat44._NP_RepositoryId, "Mat44", (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 4), 4))
_0_Img._tc_Mat44 = omniORB.tcInternal.createTypeCode(_0_Img._ad_Mat44)
omniORB.registerType(Mat44._NP_RepositoryId, _0_Img._ad_Mat44, _0_Img._tc_Mat44)
del Mat44

# enum ColorFormat
_0_Img.CF_UNKNOWN = omniORB.EnumItem("CF_UNKNOWN", 0)
_0_Img.CF_GRAY = omniORB.EnumItem("CF_GRAY", 1)
_0_Img.CF_RGB = omniORB.EnumItem("CF_RGB", 2)
_0_Img.CF_JPEG = omniORB.EnumItem("CF_JPEG", 3)
_0_Img.CF_PNG = omniORB.EnumItem("CF_PNG", 4)
_0_Img.RGB = omniORB.EnumItem("RGB", 5)
_0_Img.RLE8 = omniORB.EnumItem("RLE8", 6)
_0_Img.RLE = omniORB.EnumItem("RLE", 7)
_0_Img.RAW = omniORB.EnumItem("RAW", 8)
_0_Img.RGBA = omniORB.EnumItem("RGBA", 9)
_0_Img.RGBT = omniORB.EnumItem("RGBT", 10)
_0_Img.AYUV = omniORB.EnumItem("AYUV", 11)
_0_Img.CLJR = omniORB.EnumItem("CLJR", 12)
_0_Img.CYUV = omniORB.EnumItem("CYUV", 13)
_0_Img.GREY = omniORB.EnumItem("GREY", 14)
_0_Img.IRAW = omniORB.EnumItem("IRAW", 15)
_0_Img.IUYV = omniORB.EnumItem("IUYV", 16)
_0_Img.IY41 = omniORB.EnumItem("IY41", 17)
_0_Img.IYU1 = omniORB.EnumItem("IYU1", 18)
_0_Img.IYU2 = omniORB.EnumItem("IYU2", 19)
_0_Img.HDYC = omniORB.EnumItem("HDYC", 20)
_0_Img.UYNV = omniORB.EnumItem("UYNV", 21)
_0_Img.UYVP = omniORB.EnumItem("UYVP", 22)
_0_Img.V210 = omniORB.EnumItem("V210", 23)
_0_Img.V422 = omniORB.EnumItem("V422", 24)
_0_Img.V655 = omniORB.EnumItem("V655", 25)
_0_Img.VYUV = omniORB.EnumItem("VYUV", 26)
_0_Img.YUNV = omniORB.EnumItem("YUNV", 27)
_0_Img.YVYU = omniORB.EnumItem("YVYU", 28)
_0_Img.Y41P = omniORB.EnumItem("Y41P", 29)
_0_Img.Y211 = omniORB.EnumItem("Y211", 30)
_0_Img.Y41T = omniORB.EnumItem("Y41T", 31)
_0_Img.Y42T = omniORB.EnumItem("Y42T", 32)
_0_Img.YUVP = omniORB.EnumItem("YUVP", 33)
_0_Img.Y800 = omniORB.EnumItem("Y800", 34)
_0_Img.Y8 = omniORB.EnumItem("Y8", 35)
_0_Img.Y16 = omniORB.EnumItem("Y16", 36)
_0_Img.ColorFormat = omniORB.Enum("IDL:Img/ColorFormat:1.0", (_0_Img.CF_UNKNOWN, _0_Img.CF_GRAY, _0_Img.CF_RGB, _0_Img.CF_JPEG, _0_Img.CF_PNG, _0_Img.RGB, _0_Img.RLE8, _0_Img.RLE, _0_Img.RAW, _0_Img.RGBA, _0_Img.RGBT, _0_Img.AYUV, _0_Img.CLJR, _0_Img.CYUV, _0_Img.GREY, _0_Img.IRAW, _0_Img.IUYV, _0_Img.IY41, _0_Img.IYU1, _0_Img.IYU2, _0_Img.HDYC, _0_Img.UYNV, _0_Img.UYVP, _0_Img.V210, _0_Img.V422, _0_Img.V655, _0_Img.VYUV, _0_Img.YUNV, _0_Img.YVYU, _0_Img.Y41P, _0_Img.Y211, _0_Img.Y41T, _0_Img.Y42T, _0_Img.YUVP, _0_Img.Y800, _0_Img.Y8, _0_Img.Y16,))

_0_Img._d_ColorFormat  = (omniORB.tcInternal.tv_enum, _0_Img.ColorFormat._NP_RepositoryId, "ColorFormat", _0_Img.ColorFormat._items)
_0_Img._tc_ColorFormat = omniORB.tcInternal.createTypeCode(_0_Img._d_ColorFormat)
omniORB.registerType(_0_Img.ColorFormat._NP_RepositoryId, _0_Img._d_ColorFormat, _0_Img._tc_ColorFormat)

# struct ImageData
_0_Img.ImageData = omniORB.newEmptyClass()
class ImageData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/ImageData:1.0"

    def __init__(self, width, height, format, raw_data):
        self.width = width
        self.height = height
        self.format = format
        self.raw_data = raw_data

_0_Img.ImageData = ImageData
_0_Img._d_ImageData  = (omniORB.tcInternal.tv_struct, ImageData, ImageData._NP_RepositoryId, "ImageData", "width", omniORB.tcInternal.tv_long, "height", omniORB.tcInternal.tv_long, "format", omniORB.typeMapping["IDL:Img/ColorFormat:1.0"], "raw_data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_Img._tc_ImageData = omniORB.tcInternal.createTypeCode(_0_Img._d_ImageData)
omniORB.registerType(ImageData._NP_RepositoryId, _0_Img._d_ImageData, _0_Img._tc_ImageData)
del ImageData

# struct CameraIntrinsicParameter
_0_Img.CameraIntrinsicParameter = omniORB.newEmptyClass()
class CameraIntrinsicParameter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/CameraIntrinsicParameter:1.0"

    def __init__(self, matrix_element, distortion_coefficient):
        self.matrix_element = matrix_element
        self.distortion_coefficient = distortion_coefficient

_0_Img.CameraIntrinsicParameter = CameraIntrinsicParameter
_0_Img._d_CameraIntrinsicParameter  = (omniORB.tcInternal.tv_struct, CameraIntrinsicParameter, CameraIntrinsicParameter._NP_RepositoryId, "CameraIntrinsicParameter", "matrix_element", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 5), "distortion_coefficient", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_Img._tc_CameraIntrinsicParameter = omniORB.tcInternal.createTypeCode(_0_Img._d_CameraIntrinsicParameter)
omniORB.registerType(CameraIntrinsicParameter._NP_RepositoryId, _0_Img._d_CameraIntrinsicParameter, _0_Img._tc_CameraIntrinsicParameter)
del CameraIntrinsicParameter

# struct CameraImage
_0_Img.CameraImage = omniORB.newEmptyClass()
class CameraImage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/CameraImage:1.0"

    def __init__(self, captured_time, image, intrinsic, extrinsic):
        self.captured_time = captured_time
        self.image = image
        self.intrinsic = intrinsic
        self.extrinsic = extrinsic

_0_Img.CameraImage = CameraImage
_0_Img._d_CameraImage  = (omniORB.tcInternal.tv_struct, CameraImage, CameraImage._NP_RepositoryId, "CameraImage", "captured_time", omniORB.typeMapping["IDL:RTC/Time:1.0"], "image", omniORB.typeMapping["IDL:Img/ImageData:1.0"], "intrinsic", omniORB.typeMapping["IDL:Img/CameraIntrinsicParameter:1.0"], "extrinsic", omniORB.typeMapping["IDL:Img/Mat44:1.0"])
_0_Img._tc_CameraImage = omniORB.tcInternal.createTypeCode(_0_Img._d_CameraImage)
omniORB.registerType(CameraImage._NP_RepositoryId, _0_Img._d_CameraImage, _0_Img._tc_CameraImage)
del CameraImage

# struct TimedCameraImage
_0_Img.TimedCameraImage = omniORB.newEmptyClass()
class TimedCameraImage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/TimedCameraImage:1.0"

    def __init__(self, tm, data, error_code):
        self.tm = tm
        self.data = data
        self.error_code = error_code

_0_Img.TimedCameraImage = TimedCameraImage
_0_Img._d_TimedCameraImage  = (omniORB.tcInternal.tv_struct, TimedCameraImage, TimedCameraImage._NP_RepositoryId, "TimedCameraImage", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:Img/CameraImage:1.0"], "error_code", omniORB.tcInternal.tv_long)
_0_Img._tc_TimedCameraImage = omniORB.tcInternal.createTypeCode(_0_Img._d_TimedCameraImage)
omniORB.registerType(TimedCameraImage._NP_RepositoryId, _0_Img._d_TimedCameraImage, _0_Img._tc_TimedCameraImage)
del TimedCameraImage

# struct MultiCameraImage
_0_Img.MultiCameraImage = omniORB.newEmptyClass()
class MultiCameraImage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/MultiCameraImage:1.0"

    def __init__(self, image_seq, camera_set_id):
        self.image_seq = image_seq
        self.camera_set_id = camera_set_id

_0_Img.MultiCameraImage = MultiCameraImage
_0_Img._d_MultiCameraImage  = (omniORB.tcInternal.tv_struct, MultiCameraImage, MultiCameraImage._NP_RepositoryId, "MultiCameraImage", "image_seq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Img/CameraImage:1.0"], 0), "camera_set_id", omniORB.tcInternal.tv_long)
_0_Img._tc_MultiCameraImage = omniORB.tcInternal.createTypeCode(_0_Img._d_MultiCameraImage)
omniORB.registerType(MultiCameraImage._NP_RepositoryId, _0_Img._d_MultiCameraImage, _0_Img._tc_MultiCameraImage)
del MultiCameraImage

# struct TimedMultiCameraImage
_0_Img.TimedMultiCameraImage = omniORB.newEmptyClass()
class TimedMultiCameraImage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/TimedMultiCameraImage:1.0"

    def __init__(self, tm, data, error_code):
        self.tm = tm
        self.data = data
        self.error_code = error_code

_0_Img.TimedMultiCameraImage = TimedMultiCameraImage
_0_Img._d_TimedMultiCameraImage  = (omniORB.tcInternal.tv_struct, TimedMultiCameraImage, TimedMultiCameraImage._NP_RepositoryId, "TimedMultiCameraImage", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:Img/MultiCameraImage:1.0"], "error_code", omniORB.tcInternal.tv_long)
_0_Img._tc_TimedMultiCameraImage = omniORB.tcInternal.createTypeCode(_0_Img._d_TimedMultiCameraImage)
omniORB.registerType(TimedMultiCameraImage._NP_RepositoryId, _0_Img._d_TimedMultiCameraImage, _0_Img._tc_TimedMultiCameraImage)
del TimedMultiCameraImage

# struct NamedValue
_0_Img.NamedValue = omniORB.newEmptyClass()
class NamedValue (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/NamedValue:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_Img.NamedValue = NamedValue
_0_Img._d_NamedValue  = (omniORB.tcInternal.tv_struct, NamedValue, NamedValue._NP_RepositoryId, "NamedValue", "name", (omniORB.tcInternal.tv_string,0), "value", (omniORB.tcInternal.tv_string,0))
_0_Img._tc_NamedValue = omniORB.tcInternal.createTypeCode(_0_Img._d_NamedValue)
omniORB.registerType(NamedValue._NP_RepositoryId, _0_Img._d_NamedValue, _0_Img._tc_NamedValue)
del NamedValue

# typedef ... NVList
class NVList:
    _NP_RepositoryId = "IDL:Img/NVList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Img.NVList = NVList
_0_Img._d_NVList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Img/NamedValue:1.0"], 0)
_0_Img._ad_NVList = (omniORB.tcInternal.tv_alias, NVList._NP_RepositoryId, "NVList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Img/NamedValue:1.0"], 0))
_0_Img._tc_NVList = omniORB.tcInternal.createTypeCode(_0_Img._ad_NVList)
omniORB.registerType(NVList._NP_RepositoryId, _0_Img._ad_NVList, _0_Img._tc_NVList)
del NVList

# struct CameraDeviceProfile
_0_Img.CameraDeviceProfile = omniORB.newEmptyClass()
class CameraDeviceProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Img/CameraDeviceProfile:1.0"

    def __init__(self, devtypeid, guid, unit, vendor_name, model_name, intrinsic, properties):
        self.devtypeid = devtypeid
        self.guid = guid
        self.unit = unit
        self.vendor_name = vendor_name
        self.model_name = model_name
        self.intrinsic = intrinsic
        self.properties = properties

_0_Img.CameraDeviceProfile = CameraDeviceProfile
_0_Img._d_CameraDeviceProfile  = (omniORB.tcInternal.tv_struct, CameraDeviceProfile, CameraDeviceProfile._NP_RepositoryId, "CameraDeviceProfile", "devtypeid", (omniORB.tcInternal.tv_string,0), "guid", (omniORB.tcInternal.tv_string,0), "unit", omniORB.tcInternal.tv_short, "vendor_name", (omniORB.tcInternal.tv_string,0), "model_name", (omniORB.tcInternal.tv_string,0), "intrinsic", omniORB.typeMapping["IDL:Img/CameraIntrinsicParameter:1.0"], "properties", omniORB.typeMapping["IDL:Img/NVList:1.0"])
_0_Img._tc_CameraDeviceProfile = omniORB.tcInternal.createTypeCode(_0_Img._d_CameraDeviceProfile)
omniORB.registerType(CameraDeviceProfile._NP_RepositoryId, _0_Img._d_CameraDeviceProfile, _0_Img._tc_CameraDeviceProfile)
del CameraDeviceProfile

# interface CameraCaptureService
_0_Img._d_CameraCaptureService = (omniORB.tcInternal.tv_objref, "IDL:Img/CameraCaptureService:1.0", "CameraCaptureService")
omniORB.typeMapping["IDL:Img/CameraCaptureService:1.0"] = _0_Img._d_CameraCaptureService
_0_Img.CameraCaptureService = omniORB.newEmptyClass()
class CameraCaptureService :
    _NP_RepositoryId = _0_Img._d_CameraCaptureService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Img.CameraCaptureService = CameraCaptureService
_0_Img._tc_CameraCaptureService = omniORB.tcInternal.createTypeCode(_0_Img._d_CameraCaptureService)
omniORB.registerType(CameraCaptureService._NP_RepositoryId, _0_Img._d_CameraCaptureService, _0_Img._tc_CameraCaptureService)

# CameraCaptureService operations and attributes
CameraCaptureService._d_take_one_frame = ((), None, None)
CameraCaptureService._d_take_multi_frames = ((omniORB.tcInternal.tv_long, ), None, None)
CameraCaptureService._d_start_continuous = ((), None, None)
CameraCaptureService._d_stop_continuous = ((), None, None)
CameraCaptureService._d_getProfile = ((), (omniORB.typeMapping["IDL:Img/CameraDeviceProfile:1.0"], ), None)

# CameraCaptureService object reference
class _objref_CameraCaptureService (CORBA.Object):
    _NP_RepositoryId = CameraCaptureService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def take_one_frame(self, *args):
        return _omnipy.invoke(self, "take_one_frame", _0_Img.CameraCaptureService._d_take_one_frame, args)

    def take_multi_frames(self, *args):
        return _omnipy.invoke(self, "take_multi_frames", _0_Img.CameraCaptureService._d_take_multi_frames, args)

    def start_continuous(self, *args):
        return _omnipy.invoke(self, "start_continuous", _0_Img.CameraCaptureService._d_start_continuous, args)

    def stop_continuous(self, *args):
        return _omnipy.invoke(self, "stop_continuous", _0_Img.CameraCaptureService._d_stop_continuous, args)

    def getProfile(self, *args):
        return _omnipy.invoke(self, "getProfile", _0_Img.CameraCaptureService._d_getProfile, args)

    __methods__ = ["take_one_frame", "take_multi_frames", "start_continuous", "stop_continuous", "getProfile"] + CORBA.Object.__methods__

omniORB.registerObjref(CameraCaptureService._NP_RepositoryId, _objref_CameraCaptureService)
_0_Img._objref_CameraCaptureService = _objref_CameraCaptureService
del CameraCaptureService, _objref_CameraCaptureService

# CameraCaptureService skeleton
__name__ = "Img__POA"
class CameraCaptureService (PortableServer.Servant):
    _NP_RepositoryId = _0_Img.CameraCaptureService._NP_RepositoryId


    _omni_op_d = {"take_one_frame": _0_Img.CameraCaptureService._d_take_one_frame, "take_multi_frames": _0_Img.CameraCaptureService._d_take_multi_frames, "start_continuous": _0_Img.CameraCaptureService._d_start_continuous, "stop_continuous": _0_Img.CameraCaptureService._d_stop_continuous, "getProfile": _0_Img.CameraCaptureService._d_getProfile}

CameraCaptureService._omni_skeleton = CameraCaptureService
_0_Img__POA.CameraCaptureService = CameraCaptureService
omniORB.registerSkeleton(CameraCaptureService._NP_RepositoryId, CameraCaptureService)
del CameraCaptureService
__name__ = "Img"

#
# End of module "Img"
#
__name__ = "Img_idl"

_exported_modules = ( "Img", )

# The end.
